// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	ff_entity "ff/internal/feature_flag/entity"
)

func modalCss() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<style type=\"text/css\">\n  #modal {\n    /* Underlay covers entire screen. */\n    position: fixed;\n    top: 0px;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 1000;\n\n    /* Flexbox centers the .modal-content vertically and horizontally */\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    /* Animate when opening */\n    animation-name: fadeIn;\n    animation-duration: 150ms;\n    animation-timing-function: ease;\n  }\n\n  #modal>.modal-underlay {\n    /* underlay takes up the entire viewport. This is only\n\trequired if you want to click to dismiss the popup */\n    position: absolute;\n    z-index: -1;\n    top: 0px;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n  }\n\n  #modal>.modal-content {\n    /* Position visible dialog near the top of the window */\n    margin-top: 10vh;\n\n    /* Sizing for visible dialog */\n    width: 80%;\n    max-width: 600px;\n\n    /* Display properties for visible dialog*/\n    border: solid 1px #999;\n    border-radius: 8px;\n    box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.3);\n    background-color: white;\n    padding: 20px;\n\n    /* Animate when opening */\n    animation-name: zoomIn;\n    animation-duration: 150ms;\n    animation-timing-function: ease;\n  }\n\n  #modal.closing {\n    /* Animate when closing */\n    animation-name: fadeOut;\n    animation-duration: 150ms;\n    animation-timing-function: ease;\n  }\n\n  #modal.closing>.modal-content {\n    /* Animate when closing */\n    animation-name: zoomOut;\n    animation-duration: 150ms;\n    animation-timing-function: ease;\n  }\n\n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n    }\n\n    100% {\n      opacity: 1;\n    }\n  }\n\n  @keyframes fadeOut {\n    0% {\n      opacity: 1;\n    }\n\n    100% {\n      opacity: 0;\n    }\n  }\n\n  @keyframes zoomIn {\n    0% {\n      transform: scale(0.9);\n    }\n\n    100% {\n      transform: scale(1);\n    }\n  }\n\n  @keyframes zoomOut {\n    0% {\n      transform: scale(1);\n    }\n\n    100% {\n      transform: scale(0.9);\n    }\n  }\n</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func Modal(show bool, featureFlag ff_entity.FeatureFlagResponse) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if show {
			templ_7745c5c3_Err = modalCss().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" <div id=\"modal\" _=\"on closeModal add .closing then wait for animationend then remove me\"><div class=\"modal-underlay\" _=\"on click trigger closeModal\"></div><div id=\"modal_content\" class=\"modal-content\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = FeatureFlagForm(featureFlag).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
